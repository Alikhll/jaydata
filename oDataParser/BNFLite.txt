Expr               : OrExpr;
OrExpr             : AndExpr | OrExpr "or" AndExpr;
AndExpr            : EqualityExpr | AndExpr "and" EqualityExpr;
EqualityExpr       : RelationalExpr | EqualityExpr ( "eq" | "ne" ) RelationalExpr;
RelationalExpr     : AdditiveExpr | RelationalExpr ( "lt" | "gt" | "le" | "ge" ) AdditiveExpr;
AdditiveExpr       : MultiplicativeExpr | AdditiveExpr ( "add" | "sub" ) MultiplicativeExpr;
MultiplicativeExpr : UnaryExpr | MultiplicativeExpr ( "mul" | "div"  | "mod" ) UnaryExpr;
UnaryExpr          : PrimaryExpr | ( "-" | "not" ) UnaryExpr;
PrimaryExpr        : ParenExpr | LiteralExpr | FunctionCall | MemberPath
ParenExpr          : "(" Expr ")"
LiteralExpr        : DatetimeLiteral | StringLiteral | BoolLiteral | NumberLiteral
DatetimeLiteral    : "datetime" "'" DIGITS "-" DIGITS "-" DIGITS
                     [ "T" DIGITS ":" DIGITS ":" DIGITS [ "." DIGITS ] [ ( SIGN ) DIGITS ":" DIGTS ] [ "Z" ]
StringLiteral      : STRING
BoolLiteral        : "true" | "false" | "0" | "1"
NumberLiteral      : [ Sign ] 1*DIGIT [ "." 1*DIGIT ] [ "E" [ Sign ] 1*DIGIT ] [ "M" | "m" ] |  //double
                     [ Sign ] 1*DIGIT [ "." 1*DIGIT ] [ "f" ]                                |  //single
                     [ Sign ] 1*DIGIT [ "L" ]                                                   //long
Sign               : "+" | "-"
FunctionCall       : FunctionName "(" [ Arguments ] ")";
FunctionName       : "startswith" | "endswith" | ...;
Arguments          : Argument | Arguments "," Argument;
Argument           : Expr;
MemberPath         : [ Namespace "/" ] *(NavigationProperty "/") Field
Namespace          : NAME *("." NAME)
NavigationProperty : NAME
Field              : NAME
Name               : (WORD | UNDERSCORE) *(WORD | UNDERSCORE | DIGIT)

; -----------------------------------------------------------------------------------

OrderByExpr        : [ "asc" | "desc"] *( "," MemberPath [ "asc" | "desc"] )
